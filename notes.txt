########################################
                WORK NOTES
########################################

----- GENERAL -----
- Links to Bright/Dark Nebula Files
    - BRIGHT: https://cdsarc.cds.unistra.fr/viz-bin/cat/VII/9
    - DARK: https://cdsarc.cds.unistra.fr/viz-bin/cat/VII/7A

- Spatial cuts for the allwise catalog are still iffy
    - try to fiddle around some more

########################################
                TO DO
########################################
- Mid year check-in form for TIMESTEP
- In run_pca.py, find outlier models/make histogram of errors for each spectra
- Run full new decoder on TACC
- Test the new decoder and model for error percent
    - maybe find some way to get a condfidence interval
    - or do a similar error analysis to the PCA
    - Test parameters not in original space


########################################
                COMPLETE
########################################
- COMPLETE: made the new decoder network with correct inputs and outputs. Testing in progress
    - autoencoder.py, change the inputs to be the correct parameters, outputs to be an SED
        - Train to generate new SED if given new parameters

########################################
                PCA
########################################
----- FILES -----
- create_subset.py
    - Cuts the orignal model data file to only include a subset of the models
        - eg. Only models with Y=20
- run_pca.py
    - Runs a PCA analysis on the models, reconstructing the original with some error
        - Reconstruction multiplies matrix of weights (~1mil, 7), with PCA components (7,119)
            - This creates (~1mill, 119) matrix reconstruction of original SEDs
    - Also creates plots for analyzing error and compression as the number of components increases
    - Can also analyze individual spectra

########################################
                AUTOENCODER
########################################
----- FILES -----
- train_decoder.py
    - Using tensorflow + keras
    - Currently trains a neural network to replicate SEDs given the 6 input parameters
    - Takes the models_subset and trains on it using MSE to produce a model that should reproduce SEDs
    - Saves the model to model_decoder.keras, with checkpoints every epoch that improves saved to 
        model_checkpoints.keras

- test_decoder.py
    - Opens the saved model from train_decoder.py and loads the parameter set and true SEDs
    - Overplots the SED generated from the model to the real SED, using the testing data
    - Testing data is not used in training the model, so true generation without the real 
        parameters or SED ever interacting with the training.