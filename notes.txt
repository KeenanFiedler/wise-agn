########################################
                WORK NOTES
########################################

----- GENERAL -----
- Links to Bright/Dark Nebula Files
    - BRIGHT: https://cdsarc.cds.unistra.fr/viz-bin/cat/VII/9
    - DARK: https://cdsarc.cds.unistra.fr/viz-bin/cat/VII/7A

- Spatial cuts for the allwise catalog are still iffy
    - try to fiddle around some more

########################################
        AUGUST 5th PRESENTATION
########################################
- maybe 25 min, or 15 min
- 1 slide per min, one good figure, maybe oneliner text
- speaker NOTES
- titles are the point of the slide not title
- myabe github actions, then agn
    - what we do and why
    - details

########################################
                TO DO
########################################
- IN PROG: get validation curve from elastic cv
- IN PROG: histogram of initial params, and histogram with weights
- do presentation rough draft

########################################
                COMPLETE
########################################
- COMPLETE: Mid year check-in form for TIMESTEP
- COMPLETE: In run_pca.py, find outlier models/make histogram of errors for each spectra
- COMPLETE: made the new decoder network with correct inputs and outputs. Testing in progress
    - autoencoder.py, change the inputs to be the correct parameters, outputs to be an SED
        - Train to generate new SED if given new parameters
- COMPLETE: Run decoder with GPU, figure out CUDA
- COMPLETE: Plot out loss and accuracy functions
    - COMPLETE: Find what accuracy is defined as 
- COMPLETE: Plot color-color track with cos(i) for a model
    - COMPLETE: W2-W1, W3-W1 colors
- COMPLETE: Make random parameters space, uniform for all, and cos(i) not i
- COMPLETE: Run full new decoder on TACC
- COMPLETE: Test the new decoder and model for error percent
    - NOT VIABLE: maybe find some way to get a condfidence interval
    - COMPLETE: or do a similar error analysis to the PCA
    - COMPLETE: Test parameters not in original space
- COMPLETE: Run model training with optimal epochs
- COMPLETE: Investigate Robert's programs
    - COMPLETE: Run with already existing models
- COMPLETE: Sample of AGN, not all redshifts, take sdss+DESI crossmatched agn and save those data
    - COMPLETE: save with z, zerr, flags, w1, w2
    - COMPLETE: redshift vs uncertainty of redshift
    - COMPLETE: cut to good reshift
        - COMPLETE: histogram of W1 mags
        - COMPLETE: histogram of redshift
        - Complete: get gaussian fits, sample from those gaussian
            - COMPLETE: function to do these
- COMPLETE: Find python package to see if value is in polygon
- COMEPLETE: For each random ML model sed
    - NOT DONE:redshift it
    - COMPLETE: draw random mag from gaussian to anchor
    - COMPLETE: do similar color adding to HOD galaxy color
- COMPLETE: Look at Scikit Learn linear model package
    - COMPLETE: LASSO, RIDGE, ELASTIC NET
    - COMPLETE: find cross-validation of combination
- COMPELTE: Ask robert about the presentation
- COMPLETE: exclude bad data from w1/redshift
- COMPLETE: Empirical sampling
    - COMPLETE: skewed gaussian for w1
    - COMPLETE: cdf for redshift
    - COMPLETE: reproduce real histograms with sampler
- COMPLETE: outline of presentation
- COMPLETE: update hit or miss to be max of 3 mag, 6 mag
- COMPLETE: Update desi+sdss crossmatch to include w3,w4
- COMPLETE: VECTOR goes to COLORTRACK
    - find linear combination of color color track contribute to 
    - COMPLETE: for each colortrack, detemine which bins of colorcolor space it occupies
        - regression
        - COMPLETE: hit or miss matrix, which cells of color color space are hit by each colortrack
        - COMPLETE: divide color color into mag bins, determine which bins it falls into, make this a parameter
        - COMPLETE:Y is the model color histogram, X is the hit or miss matrix
            - find weights to make it true
            - sum(colortracks * weights)
            - do 2d histogram of sum

########################################
                PCA
########################################
----- FILES -----
- create_subset.py
    - Cuts the orignal model data file to only include a subset of the models
        - eg. Only models with Y=20
- run_pca.py
    - Runs a PCA analysis on the models, reconstructing the original with some error
        - Reconstruction multiplies matrix of weights (~1mil, 7), with PCA components (7,119)
            - This creates (~1mill, 119) matrix reconstruction of original SEDs
    - Also creates plots for analyzing error and compression as the number of components increases
    - Can also analyze individual spectra
- save_pca.py
    - Saves an hdf5 file with the weights, components, wavelengths, and means for reconstructing

########################################
                AUTOENCODER
########################################
----- FILES -----
- train_decoder.py
    - Using tensorflow + keras
    - Currently trains a neural network to replicate SEDs given the 6 input parameters
    - Takes the models_subset and trains on it using MSE to produce a model that should reproduce SEDs
    - Saves the model to model_decoder.keras, with checkpoints every epoch that improves saved to 
        model_checkpoints.keras

- test_decoder.py
    - Opens the saved model from train_decoder.py and loads the parameter set and true SEDs
    - Overplots the SED generated from the model to the real SED, using the testing data
    - Testing data is not used in training the model, so true generation without the real 
        parameters or SED ever interacting with the training.

########################################
                REGRESSION
########################################

- filters.py
    - Helper file for using the filters.hdf5 file

- find_colors.py 
    - Can find colors for any SED or set of SEDs 
    - Can generate SEDs using the machine learning model with uniformly random parameters 
    - Can create a color track for a given set of parameters, with i values from 0 to 90
    - Can create the hit or miss matrix a color track
    - Can check if a color track goes through the Type 1 and Type 2 polygons

- 2dhist.py 
    - Plotting for the 2-D histgram and color tracks